/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mares.utils.wordc.forms;

import java.awt.HeadlessException;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author jan
 */
public class MainWindow extends javax.swing.JFrame {
    private List<DocumentReference> documents;
    final JFileChooser fileChooser = new JFileChooser();
    public static final int DEFAULT_PER_PAGE = 1800;
    int charsPerPage = DEFAULT_PER_PAGE;
    int countSum = 0;



    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        this.documents = ObservableCollections.observableList(new ArrayList());
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setDragEnabled(false);
        fileChooser.setDialogTitle("Select a file to add to the list");
        initComponents();
        perPageTxt.setText(Integer.toString(DEFAULT_PER_PAGE));
        perPageTxt.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent de) {
                updated();
            }

            public void removeUpdate(DocumentEvent de) {
                updated();
            }

            public void changedUpdate(DocumentEvent de) {
                updated();
            }
            
            private void updated(){
                
                int perPage;
                try{
                    perPage = Integer.parseInt(perPageTxt.getText());
                } catch(NumberFormatException e){
                    perPage = DEFAULT_PER_PAGE;
        //            perPageTxt.setText(Integer.toString(perPage));
                }
                setCharsPerPage(perPage);
            }
        });
        refreshListSelected();
        ListSelectionModel cellSelectionModel = documentsList.getSelectionModel();

        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
              refreshListSelected();
            }
        });
    }

    public List<DocumentReference> getDocuments() {
        return documents;
    }
    
    public void recount(){
        int countOld = countSum;
        countSum = 0;
        String pagesStringOld = getPagesString();
        for(DocumentReference documentReference : documents){
            countSum += documentReference.getCount();
        }
        firePropertyChange("countSum", countOld, countSum);
        firePropertyChange("pagesString", pagesStringOld, getPagesString());
    }

    public int getCountSum() {
        return countSum;
    }
    
    public String getPagesString(){
        DecimalFormat decimalFormat = new DecimalFormat("###.###");
        return decimalFormat.format(((double)getCountSum())/getCharsPerPage());
    }

    public void setCharsPerPage(int charsPerPage) {
        int oldPerPage = this.charsPerPage;
        String pagesStringOld = getPagesString();
        this.charsPerPage = charsPerPage;
        firePropertyChange("charsPerPage", oldPerPage, charsPerPage);
        firePropertyChange("pagesString", pagesStringOld, getPagesString());
    }    
    
    public int getCharsPerPage(){
        return charsPerPage;
    }

    private int recountIndex(int index){
        return documentsList.getRowSorter() == null ? index : documentsList.getRowSorter().convertRowIndexToModel(index);
    }
    
    public DocumentReference getSelectedDocument(){
        int selected = documentsList.getSelectedRowCount() <= 0 ? -1 : documentsList.getSelectedRows()[0];
        if(selected >= 0){
            return documents.get(recountIndex(selected));
        } else {
            return null;
        }
    }
    
    private void refreshListSelected() {
        boolean isSelected = getSelectedDocument() != null;
        showBtn.setEnabled(isSelected);
        removeBtn.setEnabled(isSelected);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jButton1 = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        perPageTxt = new javax.swing.JTextField();
        perPageLbl = new javax.swing.JLabel();
        pageCountTxt = new javax.swing.JTextField();
        showBtn = new javax.swing.JButton();
        showBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        documentsList = new javax.swing.JTable();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Word Counter");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Values"));

        jLabel1.setText("Nr. of pages:");

        perPageTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        perPageLbl.setText("Chars per page:");

        pageCountTxt.setEditable(false);
        pageCountTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pagesString}"), pageCountTxt, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        pageCountTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pageCountTxtActionPerformed(evt);
            }
        });
        pageCountTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pageCountTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pageCountTxtFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perPageLbl)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perPageTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(pageCountTxt))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(perPageLbl)
                    .addComponent(perPageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pageCountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        showBtn.setText("Show");
        showBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtnActionPerformed(evt);
            }
        });

        showBtn1.setText("Clear");
        showBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBtn1ActionPerformed(evt);
            }
        });

        documentsList.setCellSelectionEnabled(true);
        documentsList.setColumnSelectionAllowed(true);
        documentsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${documents}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, documentsList);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${fileName}"));
        columnBinding.setColumnName("File");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${count}"));
        columnBinding.setColumnName("Characters");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pagesString}"));
        columnBinding.setColumnName("Pages");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(documentsList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showBtn)
                        .addGap(18, 18, 18)
                        .addComponent(showBtn1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(closeBtn)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_closeBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        insertDocument();
    }//GEN-LAST:event_addBtnActionPerformed

    private void insertDocument() throws HeadlessException {
        int returnVal = fileChooser.showOpenDialog(addBtn);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File[] selectedFiles = fileChooser.getSelectedFiles();
            for(File file: selectedFiles){
                documents.add(new DocumentReference(file).connect(this));
            }
            recount();
        }
    }

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int[] selected = documentsList.getSelectedRows();
        int deleted = 0;
        for(int sel : selected){            
            documents.remove(recountIndex(sel) - deleted);
            deleted++;
        }
        recount();
    }//GEN-LAST:event_removeBtnActionPerformed

    private void pageCountTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pageCountTxtActionPerformed
        
    }//GEN-LAST:event_pageCountTxtActionPerformed

    private void pageCountTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pageCountTxtFocusGained
        pageCountTxt.setSelectionStart(0);
        pageCountTxt.setSelectionEnd(pageCountTxt.getText().length());
    }//GEN-LAST:event_pageCountTxtFocusGained

    private void pageCountTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pageCountTxtFocusLost
        pageCountTxt.setSelectionStart(0);
        pageCountTxt.setSelectionEnd(0);
    }//GEN-LAST:event_pageCountTxtFocusLost

    private void showBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtnActionPerformed
        DocumentReference selected = getSelectedDocument();
        if(selected != null){
            BrowseWindow.showText(selected);
        }
    }//GEN-LAST:event_showBtnActionPerformed

    private void showBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBtn1ActionPerformed
        documents.clear();
    }//GEN-LAST:event_showBtn1ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JTable documentsList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField pageCountTxt;
    private javax.swing.JLabel perPageLbl;
    private javax.swing.JTextField perPageTxt;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton showBtn;
    private javax.swing.JButton showBtn1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
